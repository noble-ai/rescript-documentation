'use strict';

var Fs = require('fs');
var Dict = require('@nobleai/rescript-prelude/lib/es6/src/Dict.bs.js');
var Json = require('@nobleai/rescript-prelude/lib/es6/src/Json.bs.js');
var $$Array = require('@nobleai/rescript-prelude/lib/es6/src/Array.bs.js');
var Curry = require('rescript/lib/es6/curry.js');
var $$Option = require('@nobleai/rescript-prelude/lib/es6/src/Option.bs.js');
var Result = require('@nobleai/rescript-prelude/lib/es6/src/Result.bs.js');
var Process = require('process');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Fs__namespace = /*#__PURE__*/_interopNamespaceDefault(Fs);
var Dict__namespace = /*#__PURE__*/_interopNamespaceDefault(Dict);
var Json__namespace = /*#__PURE__*/_interopNamespaceDefault(Json);
var $$Array__namespace = /*#__PURE__*/_interopNamespaceDefault($$Array);
var Curry__namespace = /*#__PURE__*/_interopNamespaceDefault(Curry);
var $$Option__namespace = /*#__PURE__*/_interopNamespaceDefault($$Option);
var Result__namespace = /*#__PURE__*/_interopNamespaceDefault(Result);
var Process__namespace = /*#__PURE__*/_interopNamespaceDefault(Process);

// Generated by ReScript, PLEASE EDIT WITH CARE


function h1(s) {
  return "# " + s + "\n";
}

function h2(s) {
  return "## " + s + "\n";
}

function h3(s) {
  return "### " + s + "\n";
}

function list(items) {
  return items.map(function (x) {
                return "- " + x + "";
              }).join("\n");
}

var Md = {
  h1: h1,
  h2: h2,
  h3: h3,
  list: list
};

function parse(str) {
  switch (str) {
    case "module" :
        return {
                TAG: /* Ok */0,
                _0: "module"
              };
    case "type" :
        return {
                TAG: /* Ok */0,
                _0: "type"
              };
    case "value" :
        return {
                TAG: /* Ok */0,
                _0: "value"
              };
    default:
      return {
              TAG: /* Error */1,
              _0: "invalid kind"
            };
  }
}

var Kind = {
  parse: parse
};

function decodeField(obj, field, decode) {
  return Result__namespace.bind(Result__namespace.fromOption(Dict__namespace.get(obj, field), field), (function (__x) {
                return Curry__namespace._2(decode, __x, "" + field + " value");
              }));
}

function decodeDocstrings(json, str) {
  return Result__namespace.bind(Json__namespace.Result.decodeArray(json, "" + str + " array"), (function (x) {
                return Result__namespace.all(x.map(function (__x) {
                                return Json__namespace.Result.decodeString(__x, "docstring");
                              }));
              }));
}

function parse$1(json, str) {
  return Result__namespace.bind(Json__namespace.Result.decodeObject(json, "" + str + " object"), (function (obj) {
                var filepath = decodeField(obj, "filepath", Json__namespace.Result.decodeString);
                var line = decodeField(obj, "line", Json__namespace.Result.decodeInt);
                var col = decodeField(obj, "col", Json__namespace.Result.decodeInt);
                return Result__namespace.map(Result__namespace.all3(filepath, line, col), (function (param) {
                              return {
                                      filepath: param[0],
                                      line: param[1],
                                      col: param[2]
                                    };
                            }));
              }));
}

var Source = {
  parse: parse$1
};

function parse$2(json) {
  return Result__namespace.bind(Json__namespace.Result.decodeObject(json, "item object"), (function (obj) {
                var id = decodeField(obj, "id", Json__namespace.Result.decodeString);
                var kind = Result__namespace.bind(decodeField(obj, "kind", Json__namespace.Result.decodeString), parse);
                var name = decodeField(obj, "name", Json__namespace.Result.decodeString);
                var signature = $$Option__namespace.bind(Dict__namespace.get(obj, "signature"), (function (x) {
                        return Result__namespace.toOption(Json__namespace.Result.decodeString(x, "signature"));
                      }));
                var docstrings = decodeField(obj, "docstrings", decodeDocstrings);
                var source = decodeField(obj, "source", parse$1);
                var deprecated = decodeField(obj, "deprecated", Json__namespace.Result.decodeString);
                return Result__namespace.map(Result__namespace.all5(id, kind, name, docstrings, source), (function (param) {
                              return {
                                      id: param[0],
                                      kind: param[1],
                                      name: param[2],
                                      signature: signature,
                                      docstrings: param[3],
                                      source: param[4],
                                      deprecated: Result__namespace.toOption(deprecated)
                                    };
                            }));
              }));
}

function print(item) {
  return $$Array__namespace.catOptions([
                h3(item.name),
                item.signature,
                item.deprecated,
                item.docstrings.join("\n")
              ]).join("\n");
}

var Item = {
  parse: parse$2,
  print: print
};

function parse$3(json) {
  return Result__namespace.bind(Json__namespace.Result.decodeObject(json, "doc object"), (function (obj) {
                var name = decodeField(obj, "name", Json__namespace.Result.decodeString);
                var docstrings = decodeField(obj, "docstrings", decodeDocstrings);
                var source = decodeField(obj, "source", parse$1);
                var items = Result__namespace.bind(Result__namespace.bind(Result__namespace.fromOption(Dict__namespace.get(obj, "items"), "items"), (function (__x) {
                            return Json__namespace.Result.decodeArray(__x, "items");
                          })), (function (x) {
                        return Result__namespace.all(x.map(parse$2));
                      }));
                return Result__namespace.map(Result__namespace.all4(name, docstrings, source, items), (function (param) {
                              return {
                                      name: param[0],
                                      docstrings: param[1],
                                      source: param[2],
                                      items: param[3]
                                    };
                            }));
              }));
}

function print$1(doc) {
  return [
            h1(doc.name),
            doc.docstrings.join("\n"),
            doc.items.map(print).join("\n")
          ].join("\n");
}

var Doc = {
  parse: parse$3,
  print: print$1
};

Process__namespace.argv.slice(2).forEach(function (file) {
      console.log("file", file);
      console.log(Result__namespace.resolve(parse$3(Json__namespace.parseExn(Fs__namespace.readFileSync(file, "utf8"))), print$1, (function (x) {
                  return x;
                })));
    });

var parseExn = Json__namespace.parseExn;

var Json$1;
/*  Not a pure module */

exports.Doc = Doc;
exports.Item = Item;
exports.Json = Json$1;
exports.Kind = Kind;
exports.Md = Md;
exports.Source = Source;
exports.decodeDocstrings = decodeDocstrings;
exports.decodeField = decodeField;
exports.parseExn = parseExn;
